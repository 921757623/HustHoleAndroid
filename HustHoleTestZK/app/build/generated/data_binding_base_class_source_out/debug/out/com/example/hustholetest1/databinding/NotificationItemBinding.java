// Generated by view binder compiler. Do not edit!
package com.example.hustholetest1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.hustholetest1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NotificationItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView content;

  @NonNull
  public final TextView holeId;

  @NonNull
  public final TextView name;

  @NonNull
  public final LinearLayout outer;

  @NonNull
  public final RelativeLayout relativeLayout;

  @NonNull
  public final TextView time;

  @NonNull
  public final TextView title;

  private NotificationItemBinding(@NonNull LinearLayout rootView, @NonNull TextView content,
      @NonNull TextView holeId, @NonNull TextView name, @NonNull LinearLayout outer,
      @NonNull RelativeLayout relativeLayout, @NonNull TextView time, @NonNull TextView title) {
    this.rootView = rootView;
    this.content = content;
    this.holeId = holeId;
    this.name = name;
    this.outer = outer;
    this.relativeLayout = relativeLayout;
    this.time = time;
    this.title = title;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NotificationItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NotificationItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.notification_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NotificationItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.content;
      TextView content = rootView.findViewById(id);
      if (content == null) {
        break missingId;
      }

      id = R.id.hole_id;
      TextView holeId = rootView.findViewById(id);
      if (holeId == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = rootView.findViewById(id);
      if (name == null) {
        break missingId;
      }

      LinearLayout outer = (LinearLayout) rootView;

      id = R.id.relative_layout;
      RelativeLayout relativeLayout = rootView.findViewById(id);
      if (relativeLayout == null) {
        break missingId;
      }

      id = R.id.time;
      TextView time = rootView.findViewById(id);
      if (time == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      return new NotificationItemBinding((LinearLayout) rootView, content, holeId, name, outer,
          relativeLayout, time, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
